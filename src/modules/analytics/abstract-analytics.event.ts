import { REQUEST_CONTEXT_IP_ADDRESS, RequestContext } from '../../common/request-context';
import { User } from '../../entities/user.entity';
import { extend } from 'lodash';
import { ReportableEvent } from '../reporting/util/event.processor';

/**
 * Defines the base interface from which all event data objects will be derived.
 */
export interface AnalyticsEventData {
  distinct_id?: string;
  $ip?: string; // events may be generated by the backend; in these cases, there are no IP addresses to track
  isAuthenticated?: boolean;
  [key: string]: any;
}

/**
 * Defines the base interface for events that need to track the actor (i.e. a given user role that invokes said event,
 * which may differ from the user upon which the event is tracked).
 */
export interface ActorAnalyticsEventData extends AnalyticsEventData {
  actor?: string;
}

/**
 * Defines the base interface from which all event classes will be derived.
 */
export interface IAnalyticsEvent<T extends AnalyticsEventData = AnalyticsEventData> extends ReportableEvent {
  getData?: () => T;
}

/**
 * Provides an abstract implementation of the base analytics event that supplies boilerplate functionality;
 * this functionality is the automatic appending of the user's distinct ID and IP address to the event
 * data object.
 */
export abstract class AbstractAnalyticsEvent<T extends AnalyticsEventData = AnalyticsEventData> implements IAnalyticsEvent<T> {
  protected constructor(private readonly name: string, private readonly data: T, private user?: User) {
    this.data = extend(this.data || {}, {
      distinct_id: user?.id,
      $ip: RequestContext.get<string>(REQUEST_CONTEXT_IP_ADDRESS),
    } as T);
  }

  public getName() {
    return this.name;
  }

  public getData() {
    return this.data;
  }
}

/**
 * Provides an abstract implementation of actor analytics events that supplies boilerplate functionality.  This boilerplate
 * functionality includes the appending of the supplied actor's role to the event data.
 *
 */
export abstract class ActorAnalyticsEvent extends AbstractAnalyticsEvent {
  protected constructor(name: string, data: ActorAnalyticsEventData, user: User, actor: User) {
    /* Determine the type of user corresponding to the supplied actor. */
    super(name, extend(data, { actor: actor ? Object.getPrototypeOf(actor).constructor.name : null }), user);
  }
}

/**
 * Basic adapter class that's used to describe basic analytics events that do not have any specific construction
 * requirements (more or less a barebones implementation of AbstractAnalyticsEvent).
 */
export class BasicAnalyticsEvent extends AbstractAnalyticsEvent {
  constructor(name: string, data: AnalyticsEventData, user?: User) {
    super(name, data, user);
  }
}
